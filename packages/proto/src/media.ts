// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: media.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "media";

export interface DeleteCollectionRequest {
  authorId: string;
  collectionId: string;
}

export interface Collection {
  id: string;
}

export interface DeleteCollectionResponse {
  message: string;
  collection: Collection | undefined;
}

export interface GetPresignedUrlRequest {
  fileName: string;
  fileType: string;
}

export interface GetPresignedUrlResponse {
  url: string;
  message: string;
}

export interface MediaUploadedRequest {
  fileName: string;
  authorId: string;
}

export interface MediaUploadedResponse {
  message: string;
}

export interface CollectionQueryRequest {
  query: string;
  collectionId: string;
  authorId: string;
  chatId?: string | undefined;
}

export interface CollectionQueryResponse {
  jsonData: string;
}

function createBaseDeleteCollectionRequest(): DeleteCollectionRequest {
  return { authorId: "", collectionId: "" };
}

export const DeleteCollectionRequest: MessageFns<DeleteCollectionRequest> = {
  encode(message: DeleteCollectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorId !== "") {
      writer.uint32(10).string(message.authorId);
    }
    if (message.collectionId !== "") {
      writer.uint32(26).string(message.collectionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCollectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCollectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.collectionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCollectionRequest {
    return {
      authorId: isSet(object.authorId) ? globalThis.String(object.authorId) : "",
      collectionId: isSet(object.collectionId) ? globalThis.String(object.collectionId) : "",
    };
  },

  toJSON(message: DeleteCollectionRequest): unknown {
    const obj: any = {};
    if (message.authorId !== "") {
      obj.authorId = message.authorId;
    }
    if (message.collectionId !== "") {
      obj.collectionId = message.collectionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCollectionRequest>, I>>(base?: I): DeleteCollectionRequest {
    return DeleteCollectionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCollectionRequest>, I>>(object: I): DeleteCollectionRequest {
    const message = createBaseDeleteCollectionRequest();
    message.authorId = object.authorId ?? "";
    message.collectionId = object.collectionId ?? "";
    return message;
  },
};

function createBaseCollection(): Collection {
  return { id: "" };
}

export const Collection: MessageFns<Collection> = {
  encode(message: Collection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Collection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Collection {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: Collection): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Collection>, I>>(base?: I): Collection {
    return Collection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Collection>, I>>(object: I): Collection {
    const message = createBaseCollection();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteCollectionResponse(): DeleteCollectionResponse {
  return { message: "", collection: undefined };
}

export const DeleteCollectionResponse: MessageFns<DeleteCollectionResponse> = {
  encode(message: DeleteCollectionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.collection !== undefined) {
      Collection.encode(message.collection, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCollectionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCollectionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.collection = Collection.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCollectionResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      collection: isSet(object.collection) ? Collection.fromJSON(object.collection) : undefined,
    };
  },

  toJSON(message: DeleteCollectionResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.collection !== undefined) {
      obj.collection = Collection.toJSON(message.collection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCollectionResponse>, I>>(base?: I): DeleteCollectionResponse {
    return DeleteCollectionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCollectionResponse>, I>>(object: I): DeleteCollectionResponse {
    const message = createBaseDeleteCollectionResponse();
    message.message = object.message ?? "";
    message.collection = (object.collection !== undefined && object.collection !== null)
      ? Collection.fromPartial(object.collection)
      : undefined;
    return message;
  },
};

function createBaseGetPresignedUrlRequest(): GetPresignedUrlRequest {
  return { fileName: "", fileType: "" };
}

export const GetPresignedUrlRequest: MessageFns<GetPresignedUrlRequest> = {
  encode(message: GetPresignedUrlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileName !== "") {
      writer.uint32(10).string(message.fileName);
    }
    if (message.fileType !== "") {
      writer.uint32(18).string(message.fileType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPresignedUrlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPresignedUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPresignedUrlRequest {
    return {
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : "",
    };
  },

  toJSON(message: GetPresignedUrlRequest): unknown {
    const obj: any = {};
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.fileType !== "") {
      obj.fileType = message.fileType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPresignedUrlRequest>, I>>(base?: I): GetPresignedUrlRequest {
    return GetPresignedUrlRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPresignedUrlRequest>, I>>(object: I): GetPresignedUrlRequest {
    const message = createBaseGetPresignedUrlRequest();
    message.fileName = object.fileName ?? "";
    message.fileType = object.fileType ?? "";
    return message;
  },
};

function createBaseGetPresignedUrlResponse(): GetPresignedUrlResponse {
  return { url: "", message: "" };
}

export const GetPresignedUrlResponse: MessageFns<GetPresignedUrlResponse> = {
  encode(message: GetPresignedUrlResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPresignedUrlResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPresignedUrlResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPresignedUrlResponse {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: GetPresignedUrlResponse): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPresignedUrlResponse>, I>>(base?: I): GetPresignedUrlResponse {
    return GetPresignedUrlResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPresignedUrlResponse>, I>>(object: I): GetPresignedUrlResponse {
    const message = createBaseGetPresignedUrlResponse();
    message.url = object.url ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseMediaUploadedRequest(): MediaUploadedRequest {
  return { fileName: "", authorId: "" };
}

export const MediaUploadedRequest: MessageFns<MediaUploadedRequest> = {
  encode(message: MediaUploadedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileName !== "") {
      writer.uint32(10).string(message.fileName);
    }
    if (message.authorId !== "") {
      writer.uint32(18).string(message.authorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaUploadedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaUploadedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authorId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaUploadedRequest {
    return {
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      authorId: isSet(object.authorId) ? globalThis.String(object.authorId) : "",
    };
  },

  toJSON(message: MediaUploadedRequest): unknown {
    const obj: any = {};
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.authorId !== "") {
      obj.authorId = message.authorId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaUploadedRequest>, I>>(base?: I): MediaUploadedRequest {
    return MediaUploadedRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaUploadedRequest>, I>>(object: I): MediaUploadedRequest {
    const message = createBaseMediaUploadedRequest();
    message.fileName = object.fileName ?? "";
    message.authorId = object.authorId ?? "";
    return message;
  },
};

function createBaseMediaUploadedResponse(): MediaUploadedResponse {
  return { message: "" };
}

export const MediaUploadedResponse: MessageFns<MediaUploadedResponse> = {
  encode(message: MediaUploadedResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaUploadedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaUploadedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaUploadedResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: MediaUploadedResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaUploadedResponse>, I>>(base?: I): MediaUploadedResponse {
    return MediaUploadedResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaUploadedResponse>, I>>(object: I): MediaUploadedResponse {
    const message = createBaseMediaUploadedResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseCollectionQueryRequest(): CollectionQueryRequest {
  return { query: "", collectionId: "", authorId: "", chatId: undefined };
}

export const CollectionQueryRequest: MessageFns<CollectionQueryRequest> = {
  encode(message: CollectionQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.collectionId !== "") {
      writer.uint32(18).string(message.collectionId);
    }
    if (message.authorId !== "") {
      writer.uint32(26).string(message.authorId);
    }
    if (message.chatId !== undefined) {
      writer.uint32(34).string(message.chatId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollectionQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollectionQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.collectionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.authorId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.chatId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollectionQueryRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      collectionId: isSet(object.collectionId) ? globalThis.String(object.collectionId) : "",
      authorId: isSet(object.authorId) ? globalThis.String(object.authorId) : "",
      chatId: isSet(object.chatId) ? globalThis.String(object.chatId) : undefined,
    };
  },

  toJSON(message: CollectionQueryRequest): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.collectionId !== "") {
      obj.collectionId = message.collectionId;
    }
    if (message.authorId !== "") {
      obj.authorId = message.authorId;
    }
    if (message.chatId !== undefined) {
      obj.chatId = message.chatId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollectionQueryRequest>, I>>(base?: I): CollectionQueryRequest {
    return CollectionQueryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollectionQueryRequest>, I>>(object: I): CollectionQueryRequest {
    const message = createBaseCollectionQueryRequest();
    message.query = object.query ?? "";
    message.collectionId = object.collectionId ?? "";
    message.authorId = object.authorId ?? "";
    message.chatId = object.chatId ?? undefined;
    return message;
  },
};

function createBaseCollectionQueryResponse(): CollectionQueryResponse {
  return { jsonData: "" };
}

export const CollectionQueryResponse: MessageFns<CollectionQueryResponse> = {
  encode(message: CollectionQueryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jsonData !== "") {
      writer.uint32(10).string(message.jsonData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollectionQueryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollectionQueryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jsonData = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollectionQueryResponse {
    return { jsonData: isSet(object.jsonData) ? globalThis.String(object.jsonData) : "" };
  },

  toJSON(message: CollectionQueryResponse): unknown {
    const obj: any = {};
    if (message.jsonData !== "") {
      obj.jsonData = message.jsonData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollectionQueryResponse>, I>>(base?: I): CollectionQueryResponse {
    return CollectionQueryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollectionQueryResponse>, I>>(object: I): CollectionQueryResponse {
    const message = createBaseCollectionQueryResponse();
    message.jsonData = object.jsonData ?? "";
    return message;
  },
};

export type MediaServiceService = typeof MediaServiceService;
export const MediaServiceService = {
  getPresignedUrl: {
    path: "/media.MediaService/GetPresignedUrl",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPresignedUrlRequest): Buffer =>
      Buffer.from(GetPresignedUrlRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetPresignedUrlRequest => GetPresignedUrlRequest.decode(value),
    responseSerialize: (value: GetPresignedUrlResponse): Buffer =>
      Buffer.from(GetPresignedUrlResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetPresignedUrlResponse => GetPresignedUrlResponse.decode(value),
  },
  mediaUploaded: {
    path: "/media.MediaService/MediaUploaded",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MediaUploadedRequest): Buffer => Buffer.from(MediaUploadedRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): MediaUploadedRequest => MediaUploadedRequest.decode(value),
    responseSerialize: (value: MediaUploadedResponse): Buffer =>
      Buffer.from(MediaUploadedResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MediaUploadedResponse => MediaUploadedResponse.decode(value),
  },
  collectionQuery: {
    path: "/media.MediaService/CollectionQuery",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: CollectionQueryRequest): Buffer =>
      Buffer.from(CollectionQueryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CollectionQueryRequest => CollectionQueryRequest.decode(value),
    responseSerialize: (value: CollectionQueryResponse): Buffer =>
      Buffer.from(CollectionQueryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CollectionQueryResponse => CollectionQueryResponse.decode(value),
  },
  deleteCollection: {
    path: "/media.MediaService/DeleteCollection",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteCollectionRequest): Buffer =>
      Buffer.from(DeleteCollectionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteCollectionRequest => DeleteCollectionRequest.decode(value),
    responseSerialize: (value: DeleteCollectionResponse): Buffer =>
      Buffer.from(DeleteCollectionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteCollectionResponse => DeleteCollectionResponse.decode(value),
  },
} as const;

export interface MediaServiceServer extends UntypedServiceImplementation {
  getPresignedUrl: handleUnaryCall<GetPresignedUrlRequest, GetPresignedUrlResponse>;
  mediaUploaded: handleUnaryCall<MediaUploadedRequest, MediaUploadedResponse>;
  collectionQuery: handleServerStreamingCall<CollectionQueryRequest, CollectionQueryResponse>;
  deleteCollection: handleUnaryCall<DeleteCollectionRequest, DeleteCollectionResponse>;
}

export interface MediaServiceClient extends Client {
  getPresignedUrl(
    request: GetPresignedUrlRequest,
    callback: (error: ServiceError | null, response: GetPresignedUrlResponse) => void,
  ): ClientUnaryCall;
  getPresignedUrl(
    request: GetPresignedUrlRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetPresignedUrlResponse) => void,
  ): ClientUnaryCall;
  getPresignedUrl(
    request: GetPresignedUrlRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetPresignedUrlResponse) => void,
  ): ClientUnaryCall;
  mediaUploaded(
    request: MediaUploadedRequest,
    callback: (error: ServiceError | null, response: MediaUploadedResponse) => void,
  ): ClientUnaryCall;
  mediaUploaded(
    request: MediaUploadedRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MediaUploadedResponse) => void,
  ): ClientUnaryCall;
  mediaUploaded(
    request: MediaUploadedRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MediaUploadedResponse) => void,
  ): ClientUnaryCall;
  collectionQuery(
    request: CollectionQueryRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<CollectionQueryResponse>;
  collectionQuery(
    request: CollectionQueryRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<CollectionQueryResponse>;
  deleteCollection(
    request: DeleteCollectionRequest,
    callback: (error: ServiceError | null, response: DeleteCollectionResponse) => void,
  ): ClientUnaryCall;
  deleteCollection(
    request: DeleteCollectionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteCollectionResponse) => void,
  ): ClientUnaryCall;
  deleteCollection(
    request: DeleteCollectionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteCollectionResponse) => void,
  ): ClientUnaryCall;
}

export const MediaServiceClient = makeGenericClientConstructor(
  MediaServiceService,
  "media.MediaService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): MediaServiceClient;
  service: typeof MediaServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
